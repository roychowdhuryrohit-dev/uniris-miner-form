"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importStar(require("ava"));
const globalthis_1 = __importDefault(require("globalthis"));
const createLogger_1 = __importDefault(require("../../src/factories/createLogger"));
const createRoarrInitialGlobalState_1 = __importDefault(require("../../src/factories/createRoarrInitialGlobalState"));
const sequence = 0;
const time = -1;
const version = '1.0.0';
ava_1.beforeEach(() => {
    const globalThis = globalthis_1.default();
    globalThis.ROARR = createRoarrInitialGlobalState_1.default({});
});
const createLoggerWithHistory = () => {
    const messages = [];
    const log = createLogger_1.default((message) => {
        messages.push({
            ...message,
            time,
        });
    });
    log.messages = messages;
    return log;
};
ava_1.default('creates a simple message', (t) => {
    const log = createLoggerWithHistory();
    log('foo');
    t.deepEqual(log.messages, [
        {
            context: {},
            message: 'foo',
            sequence,
            time,
            version,
        },
    ]);
});
ava_1.default('replaces circular references with [Circular]', (t) => {
    const log = createLoggerWithHistory();
    const bar = {};
    bar.bar = bar;
    log({
        bar,
    }, 'foo');
    t.deepEqual(log.messages, [
        {
            context: {
                bar: {
                    bar: '[Circular ~.bar]',
                },
            },
            message: 'foo',
            sequence,
            time,
            version,
        },
    ]);
});
ava_1.default('formats message using sprintf', (t) => {
    const log = createLoggerWithHistory();
    log('foo %s', 'bar');
    t.deepEqual(log.messages, [
        {
            context: {},
            message: 'foo bar',
            sequence,
            time,
            version,
        },
    ]);
});
ava_1.default('formats message using sprintf (multiple variables)', (t) => {
    const log = createLoggerWithHistory();
    log('foo %s %s %s', 'bar', 'baz', 'qux');
    t.deepEqual(log.messages, [
        {
            context: {},
            message: 'foo bar baz qux',
            sequence,
            time,
            version,
        },
    ]);
});
ava_1.default('formats message using sprintf (digit variables)', (t) => {
    const log = createLoggerWithHistory();
    log('foo %d %d %d', '1', '2', '3');
    t.deepEqual(log.messages, [
        {
            context: {},
            message: 'foo 1 2 3',
            sequence,
            time,
            version,
        },
    ]);
});
ava_1.default('creates message with a context', (t) => {
    const log = createLoggerWithHistory();
    log({
        foo: 'bar',
    }, 'baz');
    t.deepEqual(log.messages, [
        {
            context: {
                foo: 'bar',
            },
            message: 'baz',
            sequence,
            time,
            version,
        },
    ]);
});
ava_1.default('formats message using sprintf (with context)', (t) => {
    const log = createLoggerWithHistory();
    log({
        foo: 'bar',
    }, 'baz %s', 'qux');
    t.deepEqual(log.messages, [
        {
            context: {
                foo: 'bar',
            },
            message: 'baz qux',
            sequence,
            time,
            version,
        },
    ]);
});
ava_1.default('creates logger with a context', (t) => {
    const log = createLoggerWithHistory();
    log.child({ foo: 'bar' })('baz');
    t.deepEqual(log.messages, [
        {
            context: {
                foo: 'bar',
            },
            message: 'baz',
            sequence,
            time,
            version,
        },
    ]);
});
ava_1.default('prepends context to the message context', (t) => {
    const log = createLoggerWithHistory();
    log.child({ foo: 'bar' })({ baz: 'qux' }, 'quux');
    t.deepEqual(log.messages, [
        {
            context: {
                baz: 'qux',
                foo: 'bar',
            },
            message: 'quux',
            sequence,
            time,
            version,
        },
    ]);
});
ava_1.default('prepends context to the message context (is overriden)', (t) => {
    const log = createLoggerWithHistory();
    log.child({ foo: 'bar 0' })({ foo: 'bar 1' }, 'quux');
    t.deepEqual(log.messages, [
        {
            context: {
                foo: 'bar 1',
            },
            message: 'quux',
            sequence,
            time,
            version,
        },
    ]);
});
ava_1.default('appends context to the previous child context', (t) => {
    const log = createLoggerWithHistory();
    log.child({ foo: 'bar' }).child({ baz: 'qux' })('quux');
    t.deepEqual(log.messages, [
        {
            context: {
                baz: 'qux',
                foo: 'bar',
            },
            message: 'quux',
            sequence,
            time,
            version,
        },
    ]);
});
ava_1.default('appends context to the previous child context (overrides)', (t) => {
    const log = createLoggerWithHistory();
    log.child({ foo: 'bar 0' }).child({ foo: 'bar 1' })('qux');
    t.deepEqual(log.messages, [
        {
            context: {
                foo: 'bar 1',
            },
            message: 'qux',
            sequence,
            time,
            version,
        },
    ]);
});
ava_1.default('translates child message', (t) => {
    const log = createLoggerWithHistory();
    log
        .child((message) => {
        return {
            ...message,
            message: message.message + 'bar',
        };
    })('foo');
    t.deepEqual(log.messages, [
        {
            context: {},
            message: 'foobar',
            sequence,
            time,
            version,
        },
    ]);
});
ava_1.default('throws an error if child does not return an object', (t) => {
    const log = createLoggerWithHistory();
    t.throws(() => {
        log
            .child((message) => {
            return '';
        })('foo');
    }, {
        message: 'Child middleware function must return a message object.',
    });
});
ava_1.default('convenience methods trace, debug, info, warn, error and fatal prepend a logLevel property', (t) => {
    const log = createLoggerWithHistory();
    log.trace('foo 0');
    log.debug('foo 1');
    log.info('foo 2');
    log.warn('foo 3');
    log.error('foo 4');
    log.fatal('foo 5');
    t.deepEqual(log.messages, [
        {
            context: {
                logLevel: 10,
            },
            message: 'foo 0',
            sequence: 0,
            time,
            version,
        },
        {
            context: {
                logLevel: 20,
            },
            message: 'foo 1',
            sequence: 1,
            time,
            version,
        },
        {
            context: {
                logLevel: 30,
            },
            message: 'foo 2',
            sequence: 2,
            time,
            version,
        },
        {
            context: {
                logLevel: 40,
            },
            message: 'foo 3',
            sequence: 3,
            time,
            version,
        },
        {
            context: {
                logLevel: 50,
            },
            message: 'foo 4',
            sequence: 4,
            time,
            version,
        },
        {
            context: {
                logLevel: 60,
            },
            message: 'foo 5',
            sequence: 5,
            time,
            version,
        },
    ]);
});
ava_1.default('does not produce an error when message contains % without an associated parameter', (t) => {
    const log = createLoggerWithHistory();
    log.trace('http://commons.wikimedia.org/wiki/Special:FilePath/Cucumis%20anguria.JPG');
    t.deepEqual(log.messages, [
        {
            context: {
                logLevel: 10,
            },
            message: 'http://commons.wikimedia.org/wiki/Special:FilePath/Cucumis%20anguria.JPG',
            sequence: 0,
            time,
            version,
        },
    ]);
});

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importDefault(require("ava"));
const config_1 = require("../../src/config");
const createRoarrInitialGlobalState_1 = __importDefault(require("../../src/factories/createRoarrInitialGlobalState"));
ava_1.default('creates new state', (t) => {
    const state = createRoarrInitialGlobalState_1.default({});
    t.like(state, {
        sequence: 0,
        versions: [
            config_1.ROARR_VERSION,
        ],
    });
});
ava_1.default('respects existing sequence', (t) => {
    const state = createRoarrInitialGlobalState_1.default({
        sequence: 1,
    });
    t.like(state, {
        sequence: 1,
        versions: [
            config_1.ROARR_VERSION,
        ],
    });
});
ava_1.default('appends the latest version', (t) => {
    const state = createRoarrInitialGlobalState_1.default({
        versions: [
            '0.0.1',
        ],
    });
    t.like(state, {
        sequence: 0,
        versions: [
            '0.0.1',
            config_1.ROARR_VERSION,
        ],
    });
});
ava_1.default('sets "write" method if current is the first version', (t) => {
    const state = createRoarrInitialGlobalState_1.default({});
    t.is(typeof state.write, 'function');
});
ava_1.default('overrides "write" method if current is the latest version', (t) => {
    const state = createRoarrInitialGlobalState_1.default({
        versions: [
            '0.0.1',
        ],
        write: 'foo',
    });
    t.is(typeof state.write, 'function');
});
ava_1.default('does not override "write" method if current is not the latest version', (t) => {
    // eslint-disable-next-line  @typescript-eslint/no-empty-function
    const write = () => { };
    const state = createRoarrInitialGlobalState_1.default({
        versions: [
            '100.0.0',
        ],
        write,
    });
    t.is(state.write, write);
});

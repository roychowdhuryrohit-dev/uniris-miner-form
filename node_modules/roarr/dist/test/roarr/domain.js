"use strict";
/* eslint-disable fp/no-delete */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const domain_1 = __importDefault(require("domain"));
const ava_1 = __importStar(require("ava"));
const shim_1 = __importDefault(require("domain-parent/shim"));
const globalthis_1 = __importDefault(require("globalthis"));
const createLogger_1 = __importDefault(require("../../src/factories/createLogger"));
const createRoarrInitialGlobalState_1 = __importDefault(require("../../src/factories/createRoarrInitialGlobalState"));
const originalCreate = domain_1.default.create;
const sequence = 0;
const time = -1;
const version = '1.0.0';
ava_1.beforeEach(() => {
    const globalThis = globalthis_1.default();
    globalThis.ROARR = createRoarrInitialGlobalState_1.default({});
    domain_1.default.create = originalCreate;
    // @ts-expect-error Intentional clean up.
    delete domain_1.default.parentDomain;
    shim_1.default();
});
const createLoggerWithHistory = () => {
    const messages = [];
    const log = createLogger_1.default((message) => {
        messages.push({
            ...message,
            time,
        });
    });
    log.messages = messages;
    return log;
};
ava_1.default('inherits context from domain', async (t) => {
    const log = createLoggerWithHistory();
    await log.adopt(() => {
        t.deepEqual(log.getContext(), {
            bar: 'bar',
        });
        log('foo');
    }, {
        bar: 'bar',
    });
    t.deepEqual(log.messages, [
        {
            context: {
                bar: 'bar',
            },
            message: 'foo',
            sequence,
            time,
            version,
        },
    ]);
});
ava_1.default('inherits context from domain (deep)', async (t) => {
    const log = createLoggerWithHistory();
    await log.adopt(async () => {
        t.deepEqual(log.getContext(), {
            bar: 'bar 0',
        });
        log('foo 0');
        await log.adopt(() => {
            t.deepEqual(log.getContext(), {
                bar: 'bar 0',
                baz: 'baz 1',
            });
            log('foo 1');
        }, {
            baz: 'baz 1',
        });
    }, {
        bar: 'bar 0',
    });
    t.deepEqual(log.messages, [
        {
            context: {
                bar: 'bar 0',
            },
            message: 'foo 0',
            sequence,
            time,
            version,
        },
        {
            context: {
                bar: 'bar 0',
                baz: 'baz 1',
            },
            message: 'foo 1',
            sequence: 1,
            time,
            version,
        },
    ]);
});
ava_1.default('can get logger context when in an alien domain', async (t) => {
    const log = createLoggerWithHistory();
    await log.adopt(async () => {
        t.deepEqual(log.getContext(), {
            bar: 'bar 0',
        });
        log('foo 0');
        const d0 = domain_1.default.create();
        d0.run(async () => {
            t.deepEqual(log.getContext(), {
                bar: 'bar 0',
            });
        });
    }, {
        bar: 'bar 0',
    });
});
